;;; Package --- Emacs Starup File
;;; Commentary:
;; Emacs Starup File
;;; Code:
;; Personal Details
(setq user-full-name "Gaurav Sood")
(setq user-mail-address "mail.gsood@gmail.com")
;; Repo Init
(require 'package)
(add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))
(package-initialize)
(when (not package-archive-contents)
    (package-refresh-contents))
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(require 'req-package)
(req-package el-get ;; prepare el-get (optional)
  :force t ;; load package immediately, no dependency resolution
  :config
  (add-to-list 'el-get-recipe-path "~/.emacs.d/el-get/el-get/recipes")
  (el-get 'sync))
;;Global Settings
(menu-bar-mode -1)
(tool-bar-mode -1)
(setq inhibit-startup-message t)
;;(setq gc-cons-threshold 100000000)
(add-hook 'prog-mode-hook
          (lambda () (interactive)
            (setq show-trailing-whitespace 1)))
;; use space to indent by default
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(setq backup-directory-alist '(("" . "~/.emacs.d/emacs-backup")))
(global-auto-revert-mode 1)
(column-number-mode)
(global-linum-mode)
(global-auto-revert-mode)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-language-environment "UTF-8")
(prefer-coding-system 'utf-8)
(delete-selection-mode)
(require 'volatile-highlights)
(use-package volatile-highlights
  :init
  (volatile-highlights-mode t))
(use-package undo-tree
  :init
  (global-undo-tree-mode 1))
;; (use-package yasnippet
;;   :defer t
;;   :init
;;   (add-hook 'prog-mode-hook #'yas-minor-mode))
;; PACKAGE: comment-dwim-2
(global-set-key (kbd "M-;") 'comment-dwim-2)
;; PACKAGE: anzu
;; GROUP: Editing -> Matching -> Isearch -> Anzu
(use-package anzu
  :init
  (global-anzu-mode)
  (global-set-key (kbd "M-%") 'anzu-query-replace)
  (global-set-key (kbd "C-M-%") 'anzu-query-replace-regexp))
;; PACKAGE: iedit
(use-package iedit
  :bind (("C-;" . iedit-mode))
  :init
  (setq iedit-toggle-key-default nil))
(use-package setup-helm
  :load-path "custom/")
;; Text Completion Framework
;; Incremental Completion
;; Narrowing Selection
;;(add-hook 'after-init-hook 'global-company-mode)
;; (projectile-global-mode)
;; (setq projectile-completion-system 'helm)
;; (helm-projectile-on)
;; (setq projectile-enable-caching t)
;; company
(use-package company
  :ensure t
  :init
  (add-hook 'after-init-hook 'global-company-mode)
  :config
  (delete 'company-semantic company-backends))

;; Projectile
(use-package projectile
  :init
  (projectile-global-mode)
  (setq projectile-enable-caching t))
;; Zygospore
(use-package zygospore
  :bind (("C-x 1" . zygospore-toggle-delete-other-windows)
	 ("RET" . newline-and-indent)))
(global-set-key (kbd "C-c w") 'whitespace-mode)
(windmove-default-keybindings)
;; (require 'req-package)
;; (req-package flycheck
;;   :config
;;   (progn (global-flycheck-mode)))
(use-package flycheck
  :config
  (progn
    (global-flycheck-mode)))
;; Python
(require 'virtualenvwrapper)
(venv-initialize-eshell)
(venv-initialize-interactive-shells)
(setq venv-location "/home/gaurav/.virtualenv/")
(setq-default mode-line-format (cons '(:exec venv-current-name) mode-line-format))
(require 'company-jedi)
(defun my/python-mode-hook ()
  "Python Mode Hook."
  (add-to-list 'company-backends 'company-jedi))
(add-hook 'python-mode-hook 'my/python-mode-hook)
(add-hook 'python-mode-hook 'py-autopep8-enable-on-save)
(setq jedi:environment-root "py3")
(setq jedi:environment-virtualenv (list "virtualenv" "--system-site-packages"
					"--python" "/home/gaurav/.virtualenv/py3.6.3/bin/python3"))
(setq jedi:server-args (list "--virtual-env" "/home/gaurav/.virtualenv/py3.6.3"))
(jedi:install-server)
(venv-workon "py3.6.3")
(add-hook 'python-mode-hook
	  '(lambda ()
	     (local-set-key (kbd "C-c .") 'jedi:goto-definition)
	     (local-set-key (kbd "C-c ,") 'jedi:goto-definition-pop-marker)
	     (local-set-key (kbd "C-c d") 'jedi:show-doc)
	     (local-set-key (kbd "C-<tab>") 'jedi:complete)))
(require 'flycheck-pycheckers)
(with-eval-after-load 'flycheck
  (add-hook 'flycheck-mode-hook #'flycheck-pycheckers-setup))
(add-hook 'python-mode-hook 'jedi:setup)
;; Haskell
(add-hook 'haskell-mode-hook 'intero-mode)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;C/C++;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(use-package rtags
  :config
  (progn
    (unless (rtags-executable-find "rc") (error "Binary rc is not installed"))
    (unless (rtags-executable-find "rdm") (error "Binary rdm is not installed"))

    (define-key c-mode-base-map (kbd "M-.") 'rtags-find-symbol-at-point)
    (define-key c-mode-base-map (kbd "M-,") 'rtags-find-references-at-point)
    (define-key c-mode-base-map (kbd "M?") 'rtags-display-summary)
    (define-key c-mode-base-map (kbd "<f5>") 'recompile)
    (rtags-enable-standard-keybindings)

    (setq rtags-use-helm t)
    (add-hook 'kill-emacs-hook 'rtags-quit-rdm)
    ))
(use-package helm-rtags
  :ensure t
  :config
  (progn
    (setq rtags-display-result-backend 'helm)
    ))
(use-package irony
  :config
  (progn
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'c++-mode-hook 'irony-mode)
    (unless (irony--find-server-executable) (call-interactively #'irony-install-server))
    (setq-default irony-cdb-compilation-databases '(irony-cdb-libclang
                                                      irony-cdb-clang-complete))
    (defun my-irony-mode-hook ()
      (define-key irony-mode-map [remap completion-at-point] 'irony-completion-at-point-async)
      (define-key irony-mode-map [remap complete-symbol] 'irony-completion-at-point-async))
    (add-hook 'irony-mode-hook 'my-irony-mode-hook)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
    ))
(use-package company-irony
  :ensure t
  :config
  (progn
    (eval-after-load 'company '(add-to-list 'company-backends 'company-irony))
    (eval-after-load 'company '(add-to-list 'company-backends 'company-irony-c-headers))
    ))
(use-package flycheck-irony
  :ensure t
  :config
  (progn
    (eval-after-load 'flycheck '(add-hook 'flycheck-mode-hook #'flycheck-irony-setup))))
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   (quote
    (company-irony-c-headers flycheck-pycheckers rtags req-package helm-gtags iedit anzu comment-dwim-2 undo-tree volatile-highlights zygospore use-package intero virtualenvwrapper py-autopep8 company-jedi helm-projectile company))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

;;; .emacs ends here

